#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <fcntl.h>
#include <termios.h>
#include <pthread.h>
#include <errno.h>
#include <stdbool.h>
#include <sys/time.h>

int uart_fd = -1;

// MODBUS CRC16 계산 함수
uint16_t CRC16_MODBUS(const uint8_t *data, uint16_t length) {
    uint16_t crc = 0xFFFF;
    for (uint16_t i = 0; i < length; i++) {
        crc ^= (uint16_t)data[i];
        for (uint8_t j = 0; j < 8; j++) {
            if (crc & 0x0001) {
                crc = (crc >> 1) ^ 0xA001;
            } else {
                crc >>= 1;
            }
        }
    }
    return crc;
}

// 지정된 밀리초 동안 대기하는 함수 (float 지원)
void wait_for_milliseconds(float wait_ms) {
    struct timeval start_time, current_time;
    float elapsed_ms = 0;

    gettimeofday(&start_time, NULL);
    while (elapsed_ms < wait_ms) {
        gettimeofday(&current_time, NULL); // current_time으로 명시적 수정
        elapsed_ms = (current_time.tv_sec - start_time.tv_sec) * 1000.0f + 
                     (current_time.tv_usec - start_time.tv_usec) / 1000.0f;
        usleep(1000); // 1ms 대기
    }
}

// UART 초기화 함수
int init_uart(const char *port) {
    uart_fd = open(port, O_RDWR | O_NOCTTY); // O_NDELAY 제거, 차단 모드
    if (uart_fd < 0) {
        printf("UART 열기 실패: %s\n", strerror(errno));
        return -1;
    }

    struct termios options;
    tcgetattr(uart_fd, &options);
    
    cfsetispeed(&options, B115200); // 기본 115200 bps
    cfsetospeed(&options, B115200);
    
    options.c_cflag = (options.c_cflag & ~CSIZE) | CS8;
    options.c_cflag &= ~PARENB;
    options.c_cflag &= ~CSTOPB;
    options.c_cflag |= CLOCAL | CREAD;
    options.c_iflag = 0;
    options.c_oflag = 0;
    options.c_lflag = 0;
    
    options.c_cc[VTIME] = 20; // 2초 타임아웃
    options.c_cc[VMIN] = 0;   // 최소 바이트 0

    tcflush(uart_fd, TCIFLUSH);
    if (tcsetattr(uart_fd, TCSANOW, &options) != 0) {
        printf("UART 설정 실패: %s\n", strerror(errno));
        close(uart_fd);
        return -1;
    }
    
    return 0;
}

// Baudrate 파싱 함수
int32_t parseBaudRateResponse(const uint8_t *response, int data_length, uint8_t device_addr) {
    if (data_length < 7) {
        printf("응답 길이 부족: %d 바이트 (최소 7바이트 필요)\n", data_length);
        return -1;
    }

    if (response[0] == device_addr && response[1] == 0x03 && response[2] == 0x02) {
        uint16_t receivedCRC = (response[6] << 8) | response[5];
        uint16_t calculatedCRC = CRC16_MODBUS(response, 5);

        if (receivedCRC == calculatedCRC) {
            uint16_t bps_raw = (response[3] << 8) | response[4];
            uint32_t bps;

            switch (bps_raw) {
                case 0x0007: bps = 115200; break;
                case 0x0006: bps = 57600; break;
                case 0x0004: bps = 19200; break;
                case 0x0003: bps = 9600; break;
                case 0x0002: bps = 4800; break;
                case 0x0001: bps = 2400; break;
                case 0x0000: bps = 1200; break;
                default:
                    printf("Unknown raw baud rate value: 0x%04X\n", bps_raw);
                    return -1;
            }

            switch (bps) {
                case 1200:
                case 2400:
                case 4800:
                case 9600:
                case 14400:
                case 19200:
                case 38400:
                case 56000:
                case 57600:
                case 115200:
                    printf("Current baud rate: %u bps\n", bps);
                    return bps;
                default:
                    printf("Unknown baud rate value: %u\n", bps);
                    return -1;
            }
        } else {
            printf("CRC 실패 - Device: %d, Received: %04X, Calculated: %04X\n", 
                   device_addr, receivedCRC, calculatedCRC);
            return -1;
        }
    }
    printf("잘못된 응답 형식\n");
    return -1;
}

// 보드레이트 읽기 함수
int readBaudRate(uint8_t device_addr, bool debug_print) {
    if (uart_fd < 0 || device_addr > 0x7F) {
        if (debug_print) printf("잘못된 매개변수 또는 UART가 초기화되지 않음\n");
        return -1;
    }

    uint8_t cmd[8] = {device_addr, 0x03, 0x00, 0xFE, 0x00, 0x01, 0x00, 0x00};
    uint16_t crc = CRC16_MODBUS(cmd, 6);
    cmd[6] = crc & 0xFF;
    cmd[7] = (crc >> 8) & 0xFF;

    if (debug_print) {
        printf("보드레이트 읽기 명령 전송 (Device %d): ", device_addr);
        for (int i = 0; i < 8; i++) {
            printf("0x%02X ", cmd[i]);
        }
        printf("\n");
    }

    int result = write(uart_fd, cmd, 8);
    if (result != 8) {
        if (debug_print) printf("명령 전송 실패: %d 바이트 전송됨, 오류: %s\n", result, strerror(errno));
        return -1;
    }

    wait_for_milliseconds(2000.0); // 2초 대기

    uint8_t response[32] = {0};
    int bytes_read = read(uart_fd, response, sizeof(response));
    if (bytes_read <= 0) {
        if (debug_print) printf("응답 읽기 실패: %d 바이트, 오류: %s\n", bytes_read, strerror(errno));
        return -1;
    }

    if (debug_print) {
        printf("수신 데이터: ");
        for (int i = 0; i < bytes_read; i++) {
            printf("0x%02X ", response[i]);
        }
        printf("\n");
    }

    int32_t baudrate = parseBaudRateResponse(response, bytes_read, device_addr);
    if  (baudrate < 0) {
        if (debug_print) printf("Baudrate 파싱 실패\n");
        return -1;
    }

    return baudrate; // 성공 시 Baud Rate 반환
}

// 스레드 함수
void* baudrate_thread(void* arg) {
    uint8_t device_addr = *(uint8_t*)arg;
    bool debug_print = true;

    while (1) {
        int baudrate = readBaudRate(device_addr, debug_print);
        
        if (baudrate < 0) {
            printf("데이터 읽기 실패\n");
        } else {
            printf("Baud Rate 확인 성공: %d bps\n", baudrate);
            break; // 성공 시 종료
        }
        
        wait_for_milliseconds(2000.0); // 2초 대기 후 재시도
    }
    
    return NULL;
}

int main() {
    if (init_uart("/dev/ttyUSB0") < 0) {
        return -1;
    }

    uint8_t device_addr = 1;

    pthread_t thread_id;
    if (pthread_create(&thread_id, NULL, baudrate_thread, &device_addr) != 0) {
        printf("스레드 생성 실패\n");
        close(uart_fd);
        return -1;
    }

    pthread_join(thread_id, NULL);

    close(uart_fd);
    return 0;
}






#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <termios.h>
#include <unistd.h>
#include <string.h>
#include <stdint.h>

// 전역 변수: UART 파일 디스크립터
int uart_fd = -1;

// CRC16 테이블 (Modbus용, 전체 테이블)
static const uint16_t wCRCTable[] = {
    0x0000, 0xC0C1, 0xC181, 0x0140, 0xC301, 0x03C0, 0x0280, 0xC241,
    0xC601, 0x06C0, 0x0780, 0xC741, 0x0500, 0xC5C1, 0xC481, 0x0440,
    0xCC01, 0x0CC0, 0x0D80, 0xCD41, 0x0F00, 0xCFC1, 0xCE81, 0x0E40,
    0x0A00, 0xCAC1, 0xCB81, 0x0B40, 0xC901, 0x09C0, 0x0880, 0xC841,
    0xD801, 0x18C0, 0x1980, 0xD941, 0x1B00, 0xDBC1, 0xDA81, 0x1A40,
    0x1E00, 0xDEC1, 0xDF81, 0x1F40, 0xDD01, 0x1DC0, 0x1C80, 0xDC41,
    0x1400, 0xD4C1, 0xD581, 0x1540, 0xD701, 0x17C0, 0x1680, 0xD641,
    0xD201, 0x12C0, 0x1380, 0xD341, 0x1100, 0xD1C1, 0xD081, 0x1040,
    0xF001, 0x30C0, 0x3180, 0xF141, 0x3300, 0xF3C1, 0xF281, 0x3240,
    0x3600, 0xF6C1, 0xF781, 0x3740, 0xF501, 0x35C0, 0x3480, 0xF441,
    0x3C00, 0xFCC1, 0xFD81, 0x3D40, 0xFF01, 0x3FC0, 0x3E80, 0xFE41,
    0xFA01, 0x3AC0, 0x3B80, 0xFB41, 0x3900, 0xF9C1, 0xF881, 0x3840,
    0x2800, 0xE8C1, 0xE981, 0x2940, 0xEB01, 0x2BC0, 0x2A80, 0xEA41,
    0xEE01, 0x2EC0, 0x2F80, 0xEF41, 0x2D00, 0xEDC1, 0xEC81, 0x2C40,
    0xE401, 0x24C0, 0x2580, 0xE541, 0x2700, 0xE7C1, 0xE681, 0x2640,
    0x2200, 0xE2C1, 0xE381, 0x2340, 0xE101, 0x21C0, 0x2080, 0xE041,
    0xA001, 0x60C0, 0x6180, 0xA141, 0x6300, 0xA3C1, 0xA281, 0x6240,
    0x6600, 0xA6C1, 0xA781, 0x6740, 0xA501, 0x65C0, 0x6480, 0xA441,
    0x6C00, 0xACC1, 0xAD81, 0x6D40, 0xAF01, 0x6FC0, 0x6E80, 0xAE41,
    0xAA01, 0x6AC0, 0x6B80, 0xAB41, 0x6900, 0xA9C1, 0xA881, 0x6840,
    0x7800, 0xB8C1, 0xB981, 0x7940, 0xBB01, 0x7BC0, 0x7A80, 0xBA41,
    0xBE01, 0x7EC0, 0x7F80, 0xBF41, 0x7D00, 0xBDC1, 0xBC81, 0x7C40,
    0xB401, 0x74C0, 0x7580, 0xB541, 0x7700, 0xB7C1, 0xB681, 0x7640,
    0x7200, 0xB2C1, 0xB381, 0x7340, 0xB101, 0x71C0, 0x7080, 0xB041,
    0x5000, 0x90C1, 0x9181, 0x5140, 0x9301, 0x53C0, 0x5280, 0x9241,
    0x9601, 0x56C0, 0x5780, 0x9741, 0x5500, 0x95C1, 0x9481, 0x5440,
    0x9C01, 0x5CC0, 0x5D80, 0x9D41, 0x5F00, 0x9FC1, 0x9E81, 0x5E40,
    0x5A00, 0x9AC1, 0x9B81, 0x5B40, 0x9901, 0x59C0, 0x5880, 0x9841,
    0x8801, 0x48C0, 0x4980, 0x8941, 0x4B00, 0x8BC1, 0x8A81, 0x4A40,
    0x4E00, 0x8EC1, 0x8F81, 0x4F40, 0x8D01, 0x4DC0, 0x4C80, 0x8C41,
    0x4400, 0x84C1, 0x8581, 0x4540, 0x8701, 0x47C0, 0x4680, 0x8641,
    0x8201, 0x42C0, 0x4380, 0x8341, 0x4100, 0x81C1, 0x8081, 0x4040
};

// CRC16 Modbus 계산 함수
uint16_t CRC16_MODBUS(const uint8_t *nData, uint16_t wLength) {
    uint8_t nTemp;
    uint16_t wCRCWord = 0xFFFF;

    while (wLength--) {
        nTemp = *nData++ ^ wCRCWord;
        wCRCWord >>= 8;
        wCRCWord ^= wCRCTable[nTemp];
    }
    return wCRCWord;
}

// 시리얼 포트 설정 함수
int setupSerialPort(const char *port, int baudRate) {
    int fd = open(port, O_RDWR | O_NOCTTY | O_NDELAY);
    if (fd == -1) {
        perror("Error opening serial port");
        return -1;
    }

    struct termios options;
    tcgetattr(fd, &options);

    cfsetispeed(&options, baudRate);
    cfsetospeed(&options, baudRate);

    options.c_cflag &= ~PARENB;  // No parity
    options.c_cflag &= ~CSTOPB;  // 1 stop bit
    options.c_cflag &= ~CSIZE;
    options.c_cflag |= CS8;      // 8 data bits
    options.c_cflag |= (CLOCAL | CREAD);

    options.c_lflag &= ~(ICANON | ECHO | ECHOE | ISIG);
    options.c_iflag &= ~(IXON | IXOFF | IXANY);
    options.c_oflag &= ~OPOST;

    tcsetattr(fd, TCSANOW, &options);
    return fd;
}

// 단일 릴레이 제어 함수 (Function Code 05)
void controlRelay(uint8_t slaveId, uint8_t channel, int state) {
    uint8_t functionCode = 0x05;
    uint8_t registerHigh = 0x00;
    uint8_t registerLow = channel;
    uint8_t valueHigh = state ? 0xFF : 0x00;
    uint8_t valueLow = 0x00;

    uint8_t cmd[6] = {slaveId, functionCode, registerHigh, registerLow, valueHigh, valueLow};
    uint16_t crc = CRC16_MODBUS(cmd, 6);
    uint8_t fullCmd[8];
    memcpy(fullCmd, cmd, 6);
    fullCmd[6] = crc & 0xFF;         // CRC Low
    fullCmd[7] = (crc >> 8) & 0xFF;  // CRC High

    write(uart_fd, fullCmd, 8);

    printf("Test: %s channel %d: ", state ? "Turning ON" : "Turning OFF", channel);
    for (int i = 0; i < 8; i++) {
        printf("%02X ", fullCmd[i]);
    }
    printf("\n");

    usleep(50000);  // 50ms 대기

    uint8_t response[8] = {0};
    int bytesRead = read(uart_fd, response, 8);
    if (bytesRead > 0) {
        printf("Raw response: ");
        for (int i = 0; i < bytesRead; i++) {
            printf("%02X ", response[i]);
        }
        printf("\n");
    } else {
        printf("No response received\n");
    }
}

// 통신 속도 읽기 함수
int readBaudRate(uint8_t device_addr, int debug_print) {
    if (uart_fd < 0 || device_addr > 0x7F) {
        if (debug_print) printf("Invalid parameters or UART not initialized\n");
        return -1;
    }

    uint8_t cmd[8];
    cmd[0] = device_addr;
    cmd[1] = 0x03;
    cmd[2] = 0x00;
    cmd[3] = 0xFE;  // Baud Rate 레지스터
    cmd[4] = 0x00;
    cmd[5] = 0x01;

    uint16_t crc = CRC16_MODBUS(cmd, 6);
    cmd[6] = crc & 0xFF;
    cmd[7] = (crc >> 8) & 0xFF;

    if (debug_print) {
        printf("Sending command to read baud rate: ");
        for (int i = 0; i < 8; i++) {
            printf("%02X ", cmd[i]);
        }
        printf("\n");
    }

    write(uart_fd, cmd, 8);
    usleep(50000);  // 50ms 대기

    uint8_t response[7] = {0};
    int bytesRead = read(uart_fd, response, 7);
    if (bytesRead > 0) {
        if (debug_print) {
            printf("Raw response: ");
            for (int i = 0; i < bytesRead; i++) {
                printf("%02X ", response[i]);
            }
            printf("\n");
        }
    } else {
        if (debug_print) printf("No response received\n");
    }

    return 0;  // 파싱 없으므로 단순히 성공 여부만 반환
}

int main() {
    // 시리얼 포트 초기화 (19200 bps)
    uart_fd = setupSerialPort("/dev/ttyUSB0", B115200);
    if (uart_fd == -1) {
        return 1;
    }

    // 통신 속도 확인 (디버그 출력 활성화)
    readBaudRate(0x01, 1);

    // 채널 테스트 루프
    char input[10];
    int channel;

    while (1) {
        printf("\nEnter channel number to test (0-7, or 'q' to quit): ");
        if (fgets(input, sizeof(input), stdin) == NULL) {
            continue;
        }

        if (input[0] == 'q' || input[0] == 'Q') {
            break;
        }

        channel = atoi(input);
        if (channel < 0 || channel > 7) {
            printf("Invalid channel number. Please enter 0-7.\n");
            continue;
        }

        controlRelay(0x01, channel, 1);  // LED 켜기
        sleep(2);
        controlRelay(0x01, channel, 0);  // LED 끄기
    }

    close(uart_fd);
    return 0;
}
